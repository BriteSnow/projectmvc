{"version":3,"sources":["1_app-dao-binding.js","7_app-click-to-edit.js","9-app-main.js","MainView.js","ProjectListView.js","ProjectSettings.js","ProjectTicket.js","ProjectTickets.js","ProjectView.js"],"names":[],"mappingsxvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"app-bundle.js","sourcesContent":["var app = app || {};\n\n(function(){\n\t\n\t// --------- Remote Das --------- //\n\tapp.projectDao = brite.registerDao(new RemoteDaoHandler(\"Project\"));\n\tapp.ticketDao  = brite.registerDao(new RemoteDaoHandler(\"Ticket\"));\n\t// --------- /Remote Das --------- //\n\t\n})();","var app = app || {};\n/*\n\tModule: PROP-COMMIT\n\tScope: app.domsync.*\n\n\tResponsibilities: \n\t\t- Behavior make any data-prop element editable data-prop\n\t\t- TODO: provide API to put data into an DOM tree based on the data-prop pattern\n\n\tAPIs:\n\t\t- None (for now), use and trigger DOM Events\n\n\tStructures: \n\t\t- propInfo: {type:\"\",name:\"\"} (ex {type:\"Project\",name:\"name\"})\n\n  Events: \n    - Consume: \"click;[data-editable]\"\n    - Trigger: \"PROP_EDIT_COMMIT\",propInfo when user press enter when editing\n    - Trigger: \"PROP_EDIT_CANCEL\",propInfo if pressed esc\n*/\n(function(){\n\t\tapp.domsync = {};\n\t\tvar $document = $(document);\n\n\t\t$(function(){\n\t\t\t// manage the click to edit logic\n\t\t\t$document.on(\"click\",\"[data-editable]\",function(event){\n\t\t\t\tvar $target  = $(event.target);\n\t\t\t\tvar origVal  = $target.text();\n\t\t\t\tvar origHtml = $target.html();\n\t\t\t\tvar $input = $(\"<input type='text' class='form-control' />\");\n\t\t\t\t$input.val(origVal);\n\t\t\t\t$target.empty().append($input);\n\t\t\t\t$input.select().focus();\n\n\t\t\t\t$input.on(\"keyup\",function(event){\n\t\t\t\t\t// press enter\n\t\t\t\t\tif (event.which === 13){\n\t\t\t\t\t\tcommit();\n\t\t\t\t\t}\n\t\t\t\t\t// press esc\n\t\t\t\t\telse if (event.which=== 27){\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// on loose focus, we cancel\n\t\t\t\t$input.on(\"blur\",function(){\n\t\t\t\t\tcancel();\n\t\t\t\t});\n\n\n\t\t\t\tfunction commit(){\n\t\t\t\t\tvar propInfo = getPropInfo($target);\n\t\t\t\t\tpropInfo.value = $input.val();\n\t\t\t\t\t$target.trigger(\"PROP_EDIT_COMMIT\",propInfo);\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tfunction cancel(){\n\t\t\t\t\t$target.empty();\n\t\t\t\t\t$target.html(origHtml);\n\t\t\t\t\t$target.trigger(\"PROP_EDIT_CANCEL\");\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// return {type:\"\",name:\"\"}\n\t\t// ex: data-prop=\"Project.name\" >> {type=\"Project\",name:\"name\"}\n\t\tfunction getPropInfo($prop){\n\t\t\tvar dataPropStr = $prop.attr(\"data-prop\");\n\t\t\tvar typeAndName = dataPropStr.split(\".\");\n\t\t\treturn {type:typeAndName[0],name:typeAndName[1]};\n\t\t}\n\n})();\n\n/*\n\tModule: COMMIT-TO-DAO\n\n\tReponsibilities: \n\t\t- Listen to the PROP-COMMIT event and call the appropriate DAO for an update\n\n\tStructures:\n\t\t- PROP-COMMIT.propInfo \n\t\t- britejs.dao entityInfo\n\n\tEvents:\n\t\t- Listen: PROP_EDIT_COMMIT\n*/\n(function(){\n\tvar $document = $(document);\n\t\t// get the PROP_EDIT_COMMIT and change the \n\t$document.on(\"PROP_EDIT_COMMIT\",function(event,propInfo){\n\t\tvar $target = $(event.target);\n\n\t\tvar entityInfo = $target.bEntity(propInfo.type);\n\t\tif (entityInfo){\n\t\t\tvar vals = {};\n\t\t\tvals[propInfo.name] = propInfo.value; \n\t\t\tbrite.dao(entityInfo.type).update(entityInfo.id,vals);\n\t\t}else{\n\t\t\tconsole.log(\"WARNING: no parent \" + propInfo.type + \" element for\", $target);\n\t\t}\n\t});\t\n})();","(function(){\n})();\n\n// start the application\n$(function(){\n\tbrite.display(\"MainView\").done(function(){\n\t\tapp.ctx.init();\n\t});\n});\n","(function(){\n\n\tbrite.registerView(\"MainView\",{parent:\"body\"}, {\n\n\t\tcreate: function(){\n\t\t\treturn render(\"MainView\");\n\t\t}, \n\n\t\tinit: function(){\n\t\t\tvar view = this;\n\t\t\t// ADVANCED FEATURE: if not sure, you can add this brite.display in the postDisplay. \n\t\t\t// Here, we display the leftPanel before the Main view is displayed. We return the whenInit, because we want \n\t\t\t// to wait until the ProjectListView is fully initialized, but not wait until it is considered postDisplay\n\t\t\treturn brite.display(\"ProjectListView\",view.$el.find(\".MainView-leftPanel\")).whenInit;\n\t\t},\n\n\t\tpostDisplay: function(){\n\t\t\tvar view = this;\n\t\t\tview.$contentPanel = view.$el.find(\".MainView-contentPanel\");\n\t\t\tview.$navHeader = view.$el.find(\"nav:first\");\n\t\t\tapp.fetchUser();\n\t\t}, \n\n\t\tevents: { \n\t\t\t\"click; .do-logoff\": function(){\n\t\t\t\tapp.doGet(\"/logoff\").done(function(){\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t});\n\t\t\t}\n\t\t}, \n\n\t\tdocEvents: {\n\t\t\t\"USER_REFRESHED\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tview.$navHeader.dxPush(app.user);\n\t\t\t}, \n\n\t\t\t\"APP_CTX_CHANGE\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tif (\"project\" === app.ctx.pathAt(0) && $.isNumeric(app.ctx.pathAt(1))){\n\t\t\t\t\tvar newProjectId = app.ctx.pathAt(1) * 1;\n\n\t\t\t\t\tif (newProjectId !== view.currentProjectId){\n\t\t\t\t\t\tapp.projectDao.get(newProjectId).done(function(project){\n\t\t\t\t\t\t\t// call the brite.js bEmpty jQuery extension to make sure to \n\t\t\t\t\t\t\t// destroy eventual brite.js sub views\n\t\t\t\t\t\t\tview.$contentPanel.bEmpty();\n\t\t\t\t\t\t\t// display the projectt\n\t\t\t\t\t\t\tbrite.display(\"ProjectView\",view.$el.find(\".MainView-contentPanel\"),{project:project});\n\n\t\t\t\t\t\t\tview.currentProjectId = newProjectId;\n\t\t\t\t\t\t});\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t});\n\n})();\n","(function(){\n\n\tbrite.registerView(\"ProjectListView\",{\n\n\t\tcreate: function(){\n\t\t\treturn app.projectDao.list({orderBy:\"name\"}).pipe(function(result){\n\t\t\t\treturn render(\"ProjectListView\",{projects:result});\t\n\t\t\t});\n\t\t},\n\n\t\tpostDisplay: function(){\n\t\t\tvar view = this;\n\t\t\tview.$addNewProject = view.$el.find(\".add-new-project\");\n\t\t\tselectCurrentProject.call(this);\n\t\t}, \n\n\t\tevents: {\n\n\t\t\t\"click; .add-new-project a\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tview.$addNewProject.addClass(\"active\");\n\t\t\t\tview.$addNewProject.find(\"input\").focus();\n\t\t\t}, \n\n\t\t\t\"keyup; .add-new-project input\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tvar $input = $(event.target);\n\t\t\t\tvar key = event.which;\n\t\t\t\tvar newProject;\n\t\t\t\t// press enter\n\t\t\t\tif (key === 13){\n\t\t\t\t\t// take orgId from \n\t\t\t\t\tvar orgId = app.user.orgId;\n\n\t\t\t\t\tnewProject = {name: $input.val(),\n\t\t\t\t\t\t\t\t\t\t\t\torgId: app.user.orgId};\n\n\t\t\t\t\t$input.val(\"\");\n\t\t\t\t\tapp.projectDao.create(newProject).done(function(projectCreated){\n\t\t\t\t\t\twindow.location = \"#project/\" + projectCreated.id;\n\t\t\t\t\t\tview.$addNewProject.removeClass(\"active\");\n\t\t\t\t\t\t$input.val(\"\");\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// press esc\n\t\t\t\telse if (key === 27){\n\t\t\t\t\tview.$addNewProject.removeClass(\"active\");\n\t\t\t\t\t$input.val(\"\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\n\t\tdaoEvents: {\n\t\t\t\"dataChange; Project\": refreshLis\n\t\t},\n\n\t\tdocEvents: {\n\t\t\t\"APP_CTX_CHANGE\": function(event){\n\t\t\t\tselectCurrentProject.call(this);\n\t\t\t}\n\t\t}\n\n\t});\t\n\n\t// --------- Private Methods --------- //\n\tfunction refreshLis(){\n\t\tvar view = this;\n\t\tapp.projectDao.list({orderBy:\"name\"}).done(function(result){\n\t\t\tvar html = render(\"ProjectListView-lis\",{projects:result});\t\n\t\t\tview.$el.find(\"ul\").bEmpty().html(html);\n\t\t\tvar projectId = app.ctx.get().projectId;\n\t\t\tselectCurrentProject.call(view);\n\t\t});\n\t}\n\n\tfunction selectCurrentProject(){\n\t\tvar view = this;\n\t\tvar projectId = (app.ctx.pathAt(0) === \"project\")?app.ctx.pathAsNum(1):null;\n\t\tif (projectId !== null){\n\t\t\tview.$el.find(\"li[data-entity='Project'].active\").removeClass(\"active\");\n\t\t\tvar $li = view.$el.find(\"li[data-entity='Project'][data-entity-id='\" + projectId + \"']\");\n\t\t\t$li.addClass(\"active\");\n\t\t}\n\t}\n\t// --------- /Private Methods --------- //\n\n})();","(function(){\n\t\n\tbrite.registerView(\"ProjectSettings\",{\n\n\t\tcreate: function(data){\n\t\t\tvar view = this;\n\t\t\tview.project = data;\n\t\t\treturn render(\"ProjectSettings\",{project:view.project});\n\t\t},\n\t\t\n\t\tevents: {\n\n\t\t\t// --------- add team member --------- //\n\t\t\t// display on the \n\t\t\t\"click; .add-member\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tvar $add = $(event.currentTarget);\n\t\t\t\tvar $addMemberCtn = $add.closest(\".add-member-ctn\");\n\t\t\t\tvar oldHtml = $addMemberCtn.html();\n\t\t\t\t$addMemberCtn.data(\"oldHtml\",oldHtml);\n\t\t\t\t$addMemberCtn.empty();\n\t\t\t\tvar $input = $(render(\"ProjectSettings-add-member-form\")).appendTo($addMemberCtn);\n\t\t\t\t$input.focus();\n\t\t\t},\n\t\t\t// cancel or do on key press\n\t\t\t\"keyup; .add-member-ctn\": function(event){\n\t\t\t\tif (event.which == 27){\n\t\t\t\t\tcancelAddMember($(event.currentTarget));\t\n\t\t\t\t}else if (event.which == 13){\n\t\t\t\t\tdoAddMember($(event.currentTarget));\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, \n\n\t\t\t// --------- /add team member --------- //\n\n\t\t}\n\t});\n\n\tfunction doAddMember($addMemberCtn){\n\n\t}\n\n\tfunction cancelAddMember($addMemberCtn){\n\t\tvar oldHtml = $addMemberCtn.data(\"oldHtml\");\n\t\t$addMemberCtn.empty().html(oldHtml);\n\t}\n})();\n","(function(){\n\t\n\tbrite.registerView(\"ProjectTicket\",{\n\n\t\tcreate: function(data){\n\t\t\tvar view = this;\n\t\t\tview.ticket = data.ticket;\n\t\t\treturn render(\"ProjectTicket\",view.ticket);\n\t\t}, \n\n\t\tpostDisplay: function(){\n\t\t\tvar view = this;\n\t\t\tapp.ticketDao.get(view.ticket.id).done(function(ticket){\n\t\t\t\tview.$el.dxPush(ticket);\n\t\t\t});\n\t\t}\n\t\t\n\t});\n\n})();","(function(){\n\t\n\tbrite.registerView(\"ProjectTickets\",{\n\n\t\tcreate: function(data){\n\t\t\tvar view = this;\n\t\t\tview.project = data.project;\n\t\t\treturn render(\"ProjectTickets\",view.project);\n\t\t}, \n\n\n\t\tpostDisplay: function(){\n\t\t\tvar view = this;\n\t\t\tview.$tbody = view.$el.find(\"tbody\");\n\t\t\trefreshContent.call(view);\n\n\t\t},\n\n\t\tevents: {\n\n\t\t\t\"keyup; input.newTicket\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tvar $input = $(event.target);\n\t\t\t\tvar key = event.which; \n\t\t\t\t// press enter\n\t\t\t\tif (key === 13){\n\t\t\t\t\tvar newTicket = {};\n\t\t\t\t\tnewTicket.title = $input.val();\n\t\t\t\t\tnewTicket.projectId = view.project.id;\n\t\t\t\t\tbrite.dao(\"Ticket\").create(newTicket).done(function(result){\n\t\t\t\t\t\t// console.log(\"new ticket created\",result);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// press esc\n\t\t\t\telse if (key === 27){\n\t\t\t\t\t$input.val(\"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} // /events\n\t});\n\n\t// --------- Private Methods --------- //\n\tfunction refreshContent(){\n\t\tvar view = this;\n\t\tapp.ticketDao.list({filter:{projectId:view.project.id}}).done(function(result){\n\t\t\tvar html = render(\"ProjectTickets-tbody\",{id:view.project.id,tickets:result});\t\t\t\n\t\t\tview.$tbody.bEmpty().html(html);\n\t\t\tview.$el.find(\"input.newTicket\").focus();\n\t\t});\n\t}\n\t// --------- /Private Methods --------- //\t\n\n})();","(function(){\n\n\tbrite.registerView(\"ProjectView\",{\n\n\t\tcreate: function(data){\n\t\t\tvar view = this;\n\t\t\tview.project = data.project;\n\t\t\treturn render(\"ProjectView\",{project:view.project});\n\t\t},\n\n\t\tpostDisplay: function(data){\n\t\t\tvar view = this; \n\n\t\t\t// build the list of tabNames\n\t\t\t// {tabName:$tabLi,...}\n\t\t\tview.tabs = {};\n\t\t\tview.$el.find(\"li[data-tab]\").each(function(idx,tabLi){\n\t\t\t\tvar $tabLi = $(tabLi);\n\t\t\t\tvar tabName = $tabLi.attr(\"data-tab\");\n\t\t\t\tview.tabs[tabName] = $tabLi;\n\n\t\t\t});\n\n\t\t\tview.$ticketsTabLi = view.$el.find(\".tab-tickets\");\n\t\t\tview.$settingsTabLi = view.$el.find(\".tab-settings\");\n\t\t\tview.$tabCtn = view.$el.find(\".tabctn\");\n\n\n\t\t\trefreshContent.call(view);\n\t\t}, \n\n\t\tdaoEvents: {\n\n\t\t\t\"dataChange; Project\": function(event){\n\t\t\t\tvar view = this;\n\t\t\t\tvar daoEvent = event.daoEvent;\n\t\t\t\tvar project = daoEvent.result;\n\t\t\t\tif (project.id === view.project.id){\n\t\t\t\t\tview.project = project;\n\t\t\t\t\tview.$el.find(\"[data-prop='Project.name']\").empty().html(project.name);\n\t\t\t\t}\n\t\t\t}, \n\n\t\t\t\"dataChange; Ticket\": function(){\n\t\t\t\tvar view = this;\n\t\t\t\trefreshContent.call(view);\n\t\t\t}\n\t\t}, \n\n\t\tdocEvents: {\n\t\t\t\"APP_CTX_CHANGE\": function(event){\n\t\t\t\tvar view = this;\n\n\t\t\t\t// we update this view only if it is the same project.\n\t\t\t\tif (app.ctx.pathAt(0) === \"project\" && app.ctx.pathAsNum(1) === view.project.id){\n\t\t\t\t\trefreshContent.call(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\n\t// --------- Private Methods --------- //\n\n\t// refresh the tab lis with the appropriate one selected, and the tab content to match the selected tab0\n\tfunction refreshContent(){\n\n\t\tvar view = this;\n\n\t\t\t\n\n\t\t// first, determine the type of tab we will show\n\t\tvar tabType = \"tickets\"; // \"tickets\", \"settings\", \"ticket\"\n\t\tif (app.ctx.pathAt(2) === \"settings\") {\n\t\t\ttabType = \"settings\";\n\t\t}else if (app.ctx.pathAt(2) === \"ticket\"){\n\t\t\ttabType = \"ticket\";\n\t\t}\n\n\t\t// regardless of the tab, remove the \"li.active\", and empty the tab content\n\t\tview.$el.find(\"li.active\").removeClass(\"active\");\n\t\tview.$tabCtn.bEmpty();\n\n\t\t// render tickets\n\t\tif (tabType === \"tickets\"){\n\t\t\tbrite.display(\"ProjectTickets\", view.$tabCtn, {project:view.project});\n\t\t\tview.$ticketsTabLi.addClass(\"active\");\n\t\t}\n\n\t\t// render the settings\n\t\telse if (tabType === \"settings\"){\n\n\t\t\tview.$settingsTabLi.addClass(\"active\");\n\t\t\tbrite.display(\"ProjectSettings\",view.$tabCtn,view.project);\n\t\t}\n\n\t\t// render a specific ticket\n\t\telse if (tabType === \"ticket\"){\n\t\t\t// remove eventual ticket tab\n\t\t\tview.$el.find(\".tab-ticket\").remove();\n\n\t\t\tvar ticketId = app.ctx.pathAt(3) * 1;\n\t\t\t// build the temporary ticket info\n\t\t\tvar ticket = {\n\t\t\t\tid: ticketId\n\t\t\t};\n\n\t\t\t// create and activate the ticket tab\n\t\t\tvar $ticketTabLi = $(render(\"ProjectView-ticket-tab-li\",{projectId:view.project.id,ticketId:ticketId}));\n\t\t\t$ticketTabLi.addClass(\"active\");\n\t\t\tview.$ticketsTabLi.after($ticketTabLi);\n\n\t\t\t// render the content \n\t\t\tbrite.display(\"ProjectTicket\",view.$tabCtn.bEmpty(),{ticket:ticket});\n\t\t}\n\n\t}\n\t// --------- /Private Methods --------- //\n\n\n})();"],"sourceRoot":"/source/"}